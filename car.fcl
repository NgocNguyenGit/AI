FUNCTION_BLOCK car	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
    distance: REAL;
	speed : REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	changeSpeed : REAL;	
END_VAR

FUZZIFY distance		// Fuzzify input variable 'distance'
	TERM near := (0, 1) (100, 1) (300, 0) (1000,0); 
	TERM far := (0, 0) (100, 0) (400, 1) (1000,1);
END_FUZZIFY

FUZZIFY speed		// Fuzzify input variable 'speed'
	TERM slow := (0,1) (50, 1) (80,0) (120,0);
	TERM fast := (0,0) (50,0) (80, 1) (120,1);
END_FUZZIFY

DEFUZZIFY changeSpeed		// Defzzzify output variable 'speed changed'
	TERM reduce := (-10,1) (-5, 1) (0,0) (10,0);
	TERM constant := (-10,0) (-5,0) (0, 1) (5,0) (10,0);
	TERM increase := (-10,0) (0,0) (5, 1) (10,1);
	
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK R1
	AND : MIN;			//Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			//Use 'min' activation method (how the implication is defined)
	ACCU : MAX;			//Use 'max' accumulation method (how the union of fuzzy sets is defined)

	RULE 1 : IF distance IS near AND speed IS slow THEN changeSpeed IS constant;
	RULE 2 : IF distance IS near AND speed IS fast THEN changeSpeed IS reduce;
END_RULEBLOCK

RULEBLOCK R2
	AND : MIN;			//Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			//Use 'min' activation method (how the implication is defined)
	ACCU : MAX;			//Use 'max' accumulation method (how the union of fuzzy sets is defined)

	RULE 1 : IF distance IS far AND speed IS slow THEN changeSpeed IS increase;
	RULE 2 : IF distance IS far AND speed IS fast THEN changeSpeed IS constant;
END_RULEBLOCK


END_FUNCTION_BLOCK

